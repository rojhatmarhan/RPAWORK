// <auto-generated />
using System;
using DATA.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATA.Migrations
{
    [DbContext(typeof(RPAContext))]
    partial class RPAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ENTITIES.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("41a85ed5-793d-48f3-b42d-2df20ec08626"),
                            Name = "Beyaz Eşya"
                        },
                        new
                        {
                            Id = new Guid("7c9cbfed-26f3-4063-9d41-0306f1eae424"),
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = new Guid("85c50918-6ce0-4531-b308-2e524ac63c3a"),
                            Name = "Kozmetik"
                        });
                });

            modelBuilder.Entity("ENTITIES.Concrete.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f188baed-84d3-423e-86fe-a442a2f5988f"),
                            Date = new DateTime(2022, 5, 14, 15, 36, 29, 613, DateTimeKind.Local).AddTicks(8157),
                            Description = "user1 first order",
                            UserId = new Guid("1edd49c1-c4ad-493b-8b9e-25609cbeea18")
                        },
                        new
                        {
                            Id = new Guid("fe63088f-6578-4ffe-aa9e-bf47bcc5fc21"),
                            Date = new DateTime(2022, 5, 14, 15, 36, 29, 613, DateTimeKind.Local).AddTicks(8163),
                            Description = "user2 first order",
                            UserId = new Guid("e44e664a-bb62-486d-984b-5aab43837d58")
                        },
                        new
                        {
                            Id = new Guid("d09978fd-3031-40dd-b6fb-bcc0cc368572"),
                            Date = new DateTime(2022, 5, 14, 15, 36, 29, 613, DateTimeKind.Local).AddTicks(8165),
                            Description = "user2 second order",
                            UserId = new Guid("e44e664a-bb62-486d-984b-5aab43837d58")
                        });
                });

            modelBuilder.Entity("ENTITIES.Concrete.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Piece")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0a9ee05-5cef-45c7-99f1-48f1145e8c48"),
                            OrderId = new Guid("f188baed-84d3-423e-86fe-a442a2f5988f"),
                            Piece = 13,
                            ProductId = new Guid("b2ea5779-f229-4c45-b565-553dd05aa079")
                        },
                        new
                        {
                            Id = new Guid("61064396-2770-41dd-9075-c83bfee5b8f5"),
                            OrderId = new Guid("f188baed-84d3-423e-86fe-a442a2f5988f"),
                            Piece = 13,
                            ProductId = new Guid("0df308d6-1d62-49f8-b87d-45121a8fb087")
                        },
                        new
                        {
                            Id = new Guid("1e0ca3a5-cfe2-4bea-98a7-b67ff7cc8474"),
                            OrderId = new Guid("fe63088f-6578-4ffe-aa9e-bf47bcc5fc21"),
                            Piece = 13,
                            ProductId = new Guid("b2ea5779-f229-4c45-b565-553dd05aa079")
                        },
                        new
                        {
                            Id = new Guid("fd690002-7283-45d3-91a3-4d4fee7960db"),
                            OrderId = new Guid("d09978fd-3031-40dd-b6fb-bcc0cc368572"),
                            Piece = 13,
                            ProductId = new Guid("a4436498-5dd2-49f4-a83c-850c8e46eaab")
                        });
                });

            modelBuilder.Entity("ENTITIES.Concrete.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2ea5779-f229-4c45-b565-553dd05aa079"),
                            CategoryId = new Guid("7c9cbfed-26f3-4063-9d41-0306f1eae424"),
                            Code = new Guid("11ca2893-a0fe-4286-bb15-bad66730e45e"),
                            Name = "HP Smart Tank 519 3YW73A Wi-Fi + Fotokopi + Tarayıcı Renkli",
                            Price = 1300.13m
                        },
                        new
                        {
                            Id = new Guid("0df308d6-1d62-49f8-b87d-45121a8fb087"),
                            CategoryId = new Guid("7c9cbfed-26f3-4063-9d41-0306f1eae424"),
                            Code = new Guid("17e2c381-beb8-4419-b821-10c9c4d111b4"),
                            Name = "Samsung Xpress Sl M2020-2070Fw - Mlt D111S Muadil Toneri - Çipli",
                            Price = 1300.13m
                        },
                        new
                        {
                            Id = new Guid("f5d2ca2d-df60-421b-9a2b-2c957c258eb3"),
                            CategoryId = new Guid("7c9cbfed-26f3-4063-9d41-0306f1eae424"),
                            Code = new Guid("2ac0910b-5462-426a-8ecb-01639f8314af"),
                            Name = "Huawei Matebook D15 Intel Core i7 1165G7 16GB 512GB SSD Windows 11 Home 15.6' Taşınabilir Bilgisayar",
                            Price = 1300.13m
                        },
                        new
                        {
                            Id = new Guid("a4436498-5dd2-49f4-a83c-850c8e46eaab"),
                            CategoryId = new Guid("41a85ed5-793d-48f3-b42d-2df20ec08626"),
                            Code = new Guid("a7e827ed-3a8b-4213-bcfa-1b66819d1739"),
                            Name = "Grundig GWM 91014 A 9 kg 1000 Devir Bluetooth Bağlantılı Çamaşır Makinesi",
                            Price = 1300.13m
                        });
                });

            modelBuilder.Entity("ENTITIES.Concrete.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Session")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1edd49c1-c4ad-493b-8b9e-25609cbeea18"),
                            Age = 18,
                            FirstName = "First UserName",
                            LastName = "First LastName",
                            Password = "24c9e15e52afc47c225b757e7bee1f9d",
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("e44e664a-bb62-486d-984b-5aab43837d58"),
                            Age = 43,
                            FirstName = "Second UserName",
                            LastName = "Second LastName",
                            Password = "7e58d63b60197ceb55a1c487989a3720",
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("ENTITIES.Concrete.Order", b =>
                {
                    b.HasOne("ENTITIES.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ENTITIES.Concrete.OrderDetail", b =>
                {
                    b.HasOne("ENTITIES.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ENTITIES.Concrete.Product", b =>
                {
                    b.HasOne("ENTITIES.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ENTITIES.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ENTITIES.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ENTITIES.Concrete.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
